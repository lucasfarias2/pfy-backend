package services

import (
	"bytes"
	"encoding/json"
	"net/http"
	"os"

	"github.com/google/go-github/github"
)

func GenerateRepoFromTemplate(accessToken string, repoName string, templateOwner string, templateRepo string) (*github.Repository, error) {
	url := "https://api.github.com/repos/" + templateOwner + "/" + templateRepo + "/generate"

	repoRequest := map[string]interface{}{
		"owner":                os.Getenv("GITHUB_OWNER"),
		"name":                 repoName,
		"description":          "Generated by Packlify",
		"private":              true,
		"include_all_branches": false,
	}

	jsonStr, _ := json.Marshal(repoRequest)

	req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonStr))
	if err != nil {
		return nil, err
	}

	req.Header.Set("Authorization", "Bearer "+accessToken)
	req.Header.Set("X-GitHub-Api-Version", "2022-11-28")
	req.Header.Set("Accept", "application/vnd.github+json")

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	var newRepo github.Repository
	if err := json.NewDecoder(resp.Body).Decode(&newRepo); err != nil {
		return nil, err
	}

	return &newRepo, nil
}
