package services

import (
	"bytes"
	"encoding/json"
	"io"
	"net/http"
	"os"
	"packlify-cloud-backend/models"
)

type GitHubRepo struct {
	Name        string `json:"name"`
	Description string `json:"description,omitempty"`
	Private     bool   `json:"private"`
	AutoInit    bool   `json:"auto_init"`
	Owner       string `json:"owner"`
}

func CreateGitHubRepo(project models.Project) (models.Project, error) {
	token := os.Getenv("GITHUB_ACCESS_TOKEN")
	githubOwner := os.Getenv("GITHUB_OWNER")
	apiURL := "https://api.github.com/orgs/" + githubOwner + "/repos"
	repo := GitHubRepo{
		Name:        project.Name,
		Owner:       githubOwner,
		Description: "Generated by Packlify",
		Private:     true,
		AutoInit:    false,
	}

	payload, _ := json.Marshal(&repo)

	req, _ := http.NewRequest("POST", apiURL, bytes.NewBuffer(payload))
	req.Header.Set("Authorization", "token "+token)
	req.Header.Set("Content-Type", "application/json")

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return project, err
	}
	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			return
		}
	}(resp.Body)

	var result map[string]interface{}
	err = json.NewDecoder(resp.Body).Decode(&result)
	if err != nil {
		return models.Project{}, err
	}

	if resp.StatusCode != 201 {
		return project, err
	}

	updatedProject, err := UpdateProjectRepoName(project.ID, result["clone_url"].(string))
	if err != nil {
		return project, err
	}

	return updatedProject, nil
}
