package gcp

import (
	"context"
	"fmt"
	"os"
	"packlify-cloud-backend/models"

	"cloud.google.com/go/cloudbuild/apiv1/v2/cloudbuildpb"
	run "cloud.google.com/go/run/apiv2"
	"cloud.google.com/go/run/apiv2/runpb"

	"golang.org/x/oauth2/google"
	"google.golang.org/api/option"
)

func CreateCloudRun(project models.Project, buildTrigger *cloudbuildpb.BuildTrigger) error {
	ctx := context.Background()

	gcpProjectId := os.Getenv("GCP_PROJECT_ID")

	credsJSON := fmt.Sprintf(
		`{
			"type": "service_account",
			"project_id": "%s",
			"private_key_id": "%s",
			"private_key": "%s",
			"client_email": "%s",
			"client_id": "%s",
			"auth_uri": "https://accounts.google.com/o/oauth2/auth",
			"token_uri": "https://oauth2.googleapis.com/token",
			"auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
			"client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/%s"
		}`,
		gcpProjectId,
		os.Getenv("GCP_PRIVATE_KEY_ID"),
		os.Getenv("GCP_PRIVATE_KEY"),
		os.Getenv("GCP_CLIENT_EMAIL"),
		os.Getenv("GCP_CLIENT_ID"),
		os.Getenv("GCP_CLIENT_EMAIL"),
	)

	creds, err := google.CredentialsFromJSON(ctx, []byte(credsJSON), run.DefaultAuthScopes()...)
	if err != nil {
		return err
	}

	// Create an instance of Cloud Run
	runClient, err := run.NewServicesClient(ctx, option.WithCredentials(creds))
	if err != nil {
		return err
	}

	serviceName := project.Name + "-service"
	imageName := buildTrigger.GetBuild().GetImages()[0]

	op, err := runClient.CreateService(ctx, &runpb.CreateServiceRequest{
		Parent: fmt.Sprintf("projects/%s/locations/%s", os.Getenv("GCP_PROJECT_ID"), os.Getenv("GCP_REGION")),
		Service: &runpb.Service{
			Description: "Generated by Packlify Cloud",
			Template: &runpb.RevisionTemplate{
				Scaling: &runpb.RevisionScaling{
					MinInstanceCount: 1,
					MaxInstanceCount: 1,
				},
				Containers: []*runpb.Container{
					{
						Image: imageName,
						Ports: []*runpb.ContainerPort{
							{
								ContainerPort: 8080,
								Name:          "http1",
							},
						},
					},
				},
			},
		},
		ServiceId: serviceName,
	})
	if err != nil {
		fmt.Printf("Error: %v\n", err)
		return err
	}

	resp, err := op.Wait(ctx)
	if err != nil {
		fmt.Printf("Error: %v\n", err)
		return err
	}

	fmt.Printf("Operation result: %v\n", resp)

	defer runClient.Close()

	return nil
}
