package gcp

import (
	"context"
	"fmt"
	"os"
	"packlify-cloud-backend/models"

	cloudbuild "cloud.google.com/go/cloudbuild/apiv1/v2"
	"cloud.google.com/go/cloudbuild/apiv1/v2/cloudbuildpb"
	cloudbuildv2 "cloud.google.com/go/cloudbuild/apiv2"
	cloudbuildv2pb "cloud.google.com/go/cloudbuild/apiv2/cloudbuildpb"
	"golang.org/x/oauth2/google"
	"google.golang.org/api/option"
)

func CreateBuildTrigger(project models.Project) (*cloudbuildpb.BuildTrigger, error) {
	ctx := context.Background()

	gcpProjectId := os.Getenv("GCP_PROJECT_ID")
	gcpRegion := os.Getenv("GCP_REGION")
	//githubOwner := os.Getenv("GITHUB_OWNER")
	//githubRepo := project.Name
	imageName := fmt.Sprintf("%s-docker.pkg.dev/%s/%s/%s:$COMMIT_SHA", gcpRegion, gcpProjectId, project.Name+"-docker", project.Name)

	credsJSON := fmt.Sprintf(
		`{
			"type": "service_account",
			"project_id": "%s",
			"private_key_id": "%s",
			"private_key": "%s",
			"client_email": "%s",
			"client_id": "%s",
			"auth_uri": "https://accounts.google.com/o/oauth2/auth",
			"token_uri": "https://oauth2.googleapis.com/token",
			"auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
			"client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/%s"
		}`,
		gcpProjectId,
		os.Getenv("GCP_PRIVATE_KEY_ID"),
		os.Getenv("GCP_PRIVATE_KEY"),
		os.Getenv("GCP_CLIENT_EMAIL"),
		os.Getenv("GCP_CLIENT_ID"),
		os.Getenv("GCP_CLIENT_EMAIL"),
	)

	creds, err := google.CredentialsFromJSON(ctx, []byte(credsJSON), cloudbuild.DefaultAuthScopes()...)
	if err != nil {
		return nil, err
	}

	cbClient, err := cloudbuild.NewClient(
		ctx,
		option.WithCredentials(creds),
	)

	if err != nil {
		return nil, err
	}

	repoName := fmt.Sprintf("projects/%s/locations/%s/connections/packlify-cloud/repositories/%s", gcpProjectId, gcpRegion, project.Name)

	req := &cloudbuildpb.CreateBuildTriggerRequest{
		Parent:    fmt.Sprintf("projects/%s/locations/%s", gcpProjectId, gcpRegion),
		ProjectId: gcpProjectId,
		Trigger: &cloudbuildpb.BuildTrigger{
			Name:        project.Name,
			Description: "Generated by Packlify Cloud",
			//Github: &cloudbuildpb.GitHubEventsConfig{
			//	Name: "projects/shopinpack-com/locations/us-central1/connections/packlify-cloud/repositories/the-super-test-1",
			//	Event: &cloudbuildpb.GitHubEventsConfig_Push{
			//		Push: &cloudbuildpb.PushFilter{
			//			GitRef: &cloudbuildpb.PushFilter_Branch{
			//				Branch: "main",
			//			},
			//		},
			//	},
			//},
			SourceToBuild: &cloudbuildpb.GitRepoSource{
				Source: &cloudbuildpb.GitRepoSource_Repository{
					Repository: repoName,
				},
			},
			RepositoryEventConfig: &cloudbuildpb.RepositoryEventConfig{
				Filter: &cloudbuildpb.RepositoryEventConfig_Push{
					Push: &cloudbuildpb.PushFilter{
						GitRef: &cloudbuildpb.PushFilter_Branch{
							Branch: "main",
						},
					},
				},
				Repository: repoName,
			},
			BuildTemplate: &cloudbuildpb.BuildTrigger_Build{
				Build: &cloudbuildpb.Build{
					Id: "build-" + project.Name,
					Steps: []*cloudbuildpb.BuildStep{
						{
							Id:   "Build",
							Name: "gcr.io/cloud-builders/docker",
							Args: []string{
								"build",
								"-t",
								imageName,
								".",
								"-f",
								"Dockerfile",
							},
						},
						{
							Id:   "Push",
							Name: "gcr.io/cloud-builders/docker",
							WaitFor: []string{
								"Build",
							},
							Args: []string{
								"push",
								imageName,
							},
						},
						{
							Id:   "Deploy",
							Name: "gcr.io/cloud-builders/gcloud",
							WaitFor: []string{
								"Push",
							},
							Args: []string{
								"run",
								"deploy",
								project.Name + "-run",
								"--image",
								imageName,
								"--region",
								gcpRegion,
								"--platform",
								"managed",
								"--allow-unauthenticated",
							},
						},
					}},
			},
		},
	}

	triggerOp, err := cbClient.CreateBuildTrigger(ctx, req)

	if err != nil {
		fmt.Println(err)
	}

	fmt.Println(triggerOp)

	defer cbClient.Close()

	return triggerOp, err
}

func RunBuildTrigger(project models.Project, buildTrigger *cloudbuildpb.BuildTrigger) error {
	ctx := context.Background()

	gcpProjectId := os.Getenv("GCP_PROJECT_ID")
	gcpRegion := os.Getenv("GCP_REGION")

	credsJSON := fmt.Sprintf(
		`{
			"type": "service_account",
			"project_id": "%s",
			"private_key_id": "%s",
			"private_key": "%s",
			"client_email": "%s",
			"client_id": "%s",
			"auth_uri": "https://accounts.google.com/o/oauth2/auth",
			"token_uri": "https://oauth2.googleapis.com/token",
			"auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
			"client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/%s"
		}`,
		gcpProjectId,
		os.Getenv("GCP_PRIVATE_KEY_ID"),
		os.Getenv("GCP_PRIVATE_KEY"),
		os.Getenv("GCP_CLIENT_EMAIL"),
		os.Getenv("GCP_CLIENT_ID"),
		os.Getenv("GCP_CLIENT_EMAIL"),
	)

	creds, err := google.CredentialsFromJSON(ctx, []byte(credsJSON), cloudbuild.DefaultAuthScopes()...)
	if err != nil {
		return err
	}

	cbClient, err := cloudbuild.NewClient(
		ctx,
		option.WithCredentials(creds),
	)

	if err != nil {
		return err
	}

	triggerName := fmt.Sprintf("projects/%s/locations/%s/triggers/%s", gcpProjectId, gcpRegion, project.Name)

	triggerOp, err := cbClient.RunBuildTrigger(ctx, &cloudbuildpb.RunBuildTriggerRequest{
		Name:      triggerName,
		ProjectId: gcpProjectId,
		TriggerId: buildTrigger.GetId(),
		Source: &cloudbuildpb.RepoSource{
			RepoName: project.Name,
			Revision: &cloudbuildpb.RepoSource_BranchName{
				BranchName: "main",
			},
		},
	})

	if err != nil {
		fmt.Println(err)
	}

	fmt.Println(triggerOp)

	defer cbClient.Close()

	return err
}

func CreateGitHubConnection(appInstallationId int, project models.Project) error {
	ctx := context.Background()

	c, err := cloudbuildv2.NewRepositoryManagerClient(ctx)

	response, err := c.CreateConnection(ctx, &cloudbuildv2pb.CreateConnectionRequest{
		ConnectionId: os.Getenv("GITHUB_OWNER"),
		Connection: &cloudbuildv2pb.Connection{
			ConnectionConfig: &cloudbuildv2pb.Connection_GithubConfig{
				GithubConfig: &cloudbuildv2pb.GitHubConfig{
					AuthorizerCredential: &cloudbuildv2pb.OAuthCredential{
						OauthTokenSecretVersion: os.Getenv("GCP_GITHUB_SECRET"),
					},
					AppInstallationId: int64(appInstallationId),
				},
			},
		},
	})
	if err != nil {
		return err
	}

	fmt.Println("connection created", response)

	if err != nil {
		return err
	}

	return nil
}

func ConnectGithubRepository(project models.Project) error {
	ctx := context.Background()

	gcpProjectId := os.Getenv("GCP_PROJECT_ID")

	credsJSON := fmt.Sprintf(
		`{
			"type": "service_account",
			"project_id": "%s",
			"private_key_id": "%s",
			"private_key": "%s",
			"client_email": "%s",
			"client_id": "%s",
			"auth_uri": "https://accounts.google.com/o/oauth2/auth",
			"token_uri": "https://oauth2.googleapis.com/token",
			"auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
			"client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/%s"
		}`,
		gcpProjectId,
		os.Getenv("GCP_PRIVATE_KEY_ID"),
		os.Getenv("GCP_PRIVATE_KEY"),
		os.Getenv("GCP_CLIENT_EMAIL"),
		os.Getenv("GCP_CLIENT_ID"),
		os.Getenv("GCP_CLIENT_EMAIL"),
	)

	creds, err := google.CredentialsFromJSON(ctx, []byte(credsJSON), cloudbuild.DefaultAuthScopes()...)
	if err != nil {
		return err
	}

	c, err := cloudbuildv2.NewRepositoryManagerClient(ctx, option.WithCredentials(creds))
	if err != nil {
		return err
	}

	req := &cloudbuildv2pb.CreateRepositoryRequest{
		Parent: fmt.Sprintf("projects/%s/locations/us-central1/connections/packlify-cloud", gcpProjectId),
		Repository: &cloudbuildv2pb.Repository{
			RemoteUri: project.GitHubRepo,
		},
		RepositoryId: project.Name,
	}

	op, err := c.CreateRepository(ctx, req)

	if err != nil {
		fmt.Println("Error", err)
		return err
	}

	fmt.Println("connection created", op)

	if err != nil {
		return err
	}

	defer c.Close()

	return nil
}
