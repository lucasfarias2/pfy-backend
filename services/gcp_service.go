package services

import (
	"context"
	"fmt"
	"os"
	"packlify-cloud-backend/models"

	cloudbuild "cloud.google.com/go/cloudbuild/apiv1/v2"
	"cloud.google.com/go/cloudbuild/apiv1/v2/cloudbuildpb"
	run "cloud.google.com/go/run/apiv2"

	"golang.org/x/oauth2/google"
	"google.golang.org/api/option"
)

func CreateCloudRun(project models.Project) error {
	ctx := context.Background()

	// Construct credentials JSON from environment variables
	credsJSON := fmt.Sprintf(
		`{
			"type": "service_account",
			"project_id": "%s",
			"private_key_id": "%s",
			"private_key": "%s",
			"client_email": "%s",
			"client_id": "%s",
			"auth_uri": "https://accounts.google.com/o/oauth2/auth",
			"token_uri": "https://oauth2.googleapis.com/token",
			"auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
			"client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/%s"
		}`,
		os.Getenv("GCP_PROJECT_ID"),
		os.Getenv("GCP_PRIVATE_KEY_ID"),
		os.Getenv("GCP_PRIVATE_KEY"),
		os.Getenv("GCP_CLIENT_EMAIL"),
		os.Getenv("GCP_CLIENT_ID"),
		os.Getenv("GCP_CLIENT_EMAIL"),
	)

	// Parse credentials JSON
	creds, err := google.CredentialsFromJSON(ctx, []byte(credsJSON), run.DefaultAuthScopes()...)
	if err != nil {
		return err
	}

	// Create an instance of Cloud Build
	cbClient, err := cloudbuild.NewClient(
		ctx,
		option.WithCredentials(creds),
	)

	if err != nil {
		return err
	}

	// Create an instance of Cloud Run
	runClient, err := run.NewServicesClient(ctx, option.WithCredentials(creds))
	if err != nil {
		return err
	}

	triggerOp, err := cbClient.CreateBuildTrigger(ctx, &cloudbuildpb.CreateBuildTriggerRequest{
		Parent:    fmt.Sprintf("projects/%s/locations/global", os.Getenv("GCP_PROJECT_ID")),
		ProjectId: os.Getenv("GCP_PROJECT_ID"),
		Trigger: &cloudbuildpb.BuildTrigger{
			Name:        "test-trigger" + project.Name,
			Description: "Trigger for test-repo generated by Packlify Cloud",
			Github: &cloudbuildpb.GitHubEventsConfig{
				Owner: os.Getenv("GITHUB_OWNER"),
				Name:  "test-repo-7",
				Event: &cloudbuildpb.GitHubEventsConfig_Push{
					Push: &cloudbuildpb.PushFilter{
						GitRef: &cloudbuildpb.PushFilter_Branch{
							Branch: "main",
						},
					},
				},
			},
			BuildTemplate: &cloudbuildpb.BuildTrigger_Build{
				Build: &cloudbuildpb.Build{
					Steps: []*cloudbuildpb.BuildStep{
						{
							Name: "gcr.io/cloud-builders/pack",
							Args: []string{
								"build",
								fmt.Sprintf("gcr.io/%s/%s", os.Getenv("GCP_PROJECT_ID"), project.Name),
								"--builder", "gcr.io/buildpacks/builder:v1",
								// Optional: specify buildpacks
								// "--buildpack", "gcr.io/buildpacks/nodejs:latest",
							},
						},
					},
					Images: []string{
						fmt.Sprintf("gcr.io/%s/%s", os.Getenv("GCP_PROJECT_ID"), project.Name),
					},
				},
			},
		},
	})

	if err != nil {
		fmt.Println(err)

		return err
	}

	fmt.Println(triggerOp)

	// op, err := runClient.CreateService(ctx, &runpb.CreateServiceRequest{
	// 	Parent: fmt.Sprintf("projects/%s/locations/us-central1", os.Getenv("GCP_PROJECT_ID")),
	// 	Service: &runpb.Service{
	// 		Name: "test-repo-service",
	// 	},
	// 	ServiceId: "test-repo-service",
	// })
	// if err != nil {
	// 	// TODO: Handle error.

	// 	fmt.Printf("Error: %v\n", err)
	// 	return err
	// }

	// resp, err := op.Wait(ctx)
	// if err != nil {
	// 	// TODO: Handle error.
	// 	fmt.Printf("Error: %v\n", err)
	// 	return err
	// }

	// fmt.Printf("Operation result: %v\n", resp)

	defer cbClient.Close()
	defer runClient.Close()

	return nil
}
